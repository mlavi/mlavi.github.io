<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pets on Mark&#39;s Blog</title>
    <link>http://mark.lavi.us/tags/pets/</link>
    <description>Recent content in pets on Mark&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 26 Jan 2021 09:37:33 -0600</lastBuildDate><atom:link href="http://mark.lavi.us/tags/pets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning AlpineLinux.org, Ansible.com, and Packer.io</title>
      <link>http://mark.lavi.us/post/learning-alpine-linux-ansible-and-packer/</link>
      <pubDate>Tue, 26 Jan 2021 09:37:33 -0600</pubDate>
      
      <guid>http://mark.lavi.us/post/learning-alpine-linux-ansible-and-packer/</guid>
      <description>&lt;p&gt;For my 2020-1 holiday break, I decided my next personal project would be to rebuild my home infrastructure on containers. I&amp;rsquo;d been inspired by a recent discovery of &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt;, where open source projects are built and run as containers. While I have a burning desire to better my Kubernetes practice, not enough of the world delivers software as a Helm chart, so merely running everything as containers would be a good intermediate step. Let me share my first six steps with examples&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ten Steps from Pets to Cattle</title>
      <link>http://mark.lavi.us/post/ten_steps_from_pets_to_cattle/</link>
      <pubDate>Wed, 25 Jan 2017 11:05:13 -0700</pubDate>
      
      <guid>http://mark.lavi.us/post/ten_steps_from_pets_to_cattle/</guid>
      <description>&lt;p&gt;Why do we need DevOps when IT and Operations succeed in their responsibility
for security and uptime, using administrative tools to maintain, backup, and
restore those systems? Because the operations domain must be documented,
democratized, and distributed to achieve agility before Operations returns
to become a force multiplier instead of a keep the lights on organization.
Let me demonstrate that traditional values for long lived infrastructure and
their retroactive justification do not apply when progressing to a DevOps
mindset.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
